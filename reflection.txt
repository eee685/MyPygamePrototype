- CHALLENGES
Challenges in the process of making the project include time limits, planning, debugging and code organisation. The project was split into separate parts which needed to be submitted within a time limit, which limited the amount of work that could be put into the different deliverables, such as deliverable three. This was circumvented through planning what to do. The only plan for the project was to follow deliverables 1 and 2, which only provided a base framework and lead to messy work. Debugging and code organisation were very poor because of how messy and big the code was, and how it wasn't organised well and many things were in semi-random order. To improve on all these challenges next time, better planning and organisation is needed.

- ETHICAL/LEGAL CONSIDERATIONS
Ethical and legal considerations includes obeying copyright laws and making the game accessible for everyone and crediting other people's work. Since i didn't use anyone elses work, i didn't break any copyright laws and i don't have to credit other people. The game controls are made very simple so that everyone can use the game. A major ethical and legal consideration is user data and privacy, but since my game doesn't use any user data at all, privacy shouldn't be a concern.

- DESIGN CHOICES
Most of the code was split into separate files to promote modular code. Modular code was helpful in being reusable when needed, leading to less work in every aspect. It also made debugging easier, since there usually was only a few problems in one file instead of many problems across many files. Another design choice was OOP when making the sprites. This allowed for more modular code, since instead of rewriting code for similar sprites, said sprites can now inherit any needed code from a base class. Encapsulation was done through the use of methods, which handle attributes, in the classes which prevented access to the different attributes of the sprites. Encapsulation made the code abstract (abstraction) and hid all unnecessary workings and only exposed necessary working, which made fixing and navigating code easier.